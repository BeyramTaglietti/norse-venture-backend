// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title      String
  background String?
  date       DateTime

  owner        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      Int
  tasks        Task[]
  partecipants UserInTrip[]
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  value       Boolean   @default(false)
  description String?
  date        DateTime?
  price       Int?

  trip   Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId Int
}

model UserInTrip {
  trip   Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([tripId, userId])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String       @unique
  username String       @unique
  picture  String
  Trip     Trip[]
  trips    UserInTrip[]

  friends         User[] @relation("friends")
  friendsRelation User[] @relation("friends")

  sentFriendRequests     FriendRequest[] @relation("sentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("receivedFriendRequests")

  refreshToken String?
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation(name: "sentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int

  receiver   User @relation(name: "receivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int

  @@unique([senderId, receiverId])
}
